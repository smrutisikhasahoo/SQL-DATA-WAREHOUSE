/*
===============================================================================
Quality Checks
===============================================================================
Script Purpose:
    This script performs various quality checks for data consistency, accuracy, 
    and standardization across the 'silver' layer. It includes checks for:
    - Null or duplicate primary keys.
    - Unwanted spaces in string fields.
    - Data standardization and consistency.
    - Invalid date ranges and orders.
    - Data consistency between related fields.

Usage Notes:
    - Run these checks after data loading Silver Layer.
    - Investigate and resolve any discrepancies found during the checks.
===============================================================================
*/



-- check for nulls or duplicates in primary key
--expectation: no result

SELECT
cst_id,
 COUNT(*)
 FROM silver.crm_cust_info
 GROUP BY cst_id
 HAVING COUNT(*) >1


 ---- TO REMOVE DUPLICATE CST_ID WE HAVE TO INCLUDE ONE LASTEST VALUE (FREASH VALUE)
-- Rank the records
 SELECT
 * 
 FROM(
 SELECT 
 * ,
 ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) as flag_last
 FROM silver.crm_cust_info
 )T WHERE flag_last !=1 

 --CHECHK FOR UNWANTED SPACES
 --EXCECTATION: NO RESULT
 SELECT DISTINCT csst_gndr
 from silver.crm_cust_info

SELECT
*
  FROM(
		 SELECT 
		 * ,
		 ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) as flag_last
		 FROM bronze.crm_cust_info
 )T WHERE flag_last = 1 AND  cst_id IS NOT NULL

 --crm_prd_info chechking for null,cleaning
 
SELECT
prd_id,
 COUNT(*)
 FROM silver.crm_prd_info
 GROUP BY prd_id
 HAVING COUNT(*) >1 --correct no null in primary key

 --CHECK FOR NEGATIVE NUMBER
 --EXPECT: NO RESULT
 SELECT
 prd_cost
 FROM bronze.crm_prd_info
 WHERE prd_cost<0 OR prd_cost is null

 --DATA STANDARDIZATION AND NORMALIZATION
  SELECT DISTINCT prd_line
  FROM bronze.crm_prd_info

  SELECT
  CAST(prd_start_dt AS DATE)AS prd_start_dt,
  CAST(LEAD(prd_start_dt) OVER(PARTITION BY prd_key ORDER BY prd_start_dt)-1 AS DATE )AS prd_end_dt
  FROM bronze.crm_prd_info

  SELECT*
    FROM bronze.crm_prd_info
SELECT
	sls_ord_num,
    sls_prd_key,
    sls_cust_id,
    sls_order_dt,
    sls_ship_dt,
    sls_due_dt,
    sls_sales,
    sls_quantity,
    sls_price
  FROM bronze.crm_sales_details
WHERE sls_ord_num != TRIM(sls_ord_num)

--relationship check for any extra value or valu no of value is there
SELECT
	sls_ord_num,
    sls_prd_key,
    sls_cust_id,
    sls_order_dt,
    sls_ship_dt,
    sls_due_dt,
    sls_sales,
    sls_quantity,
    sls_price
  FROM bronze.crm_sales_details
--WHERE sls_prd_key NOT IN (SELECT prd_key from silver.crm_prd_info)
WHERE sls_cust_id NOT IN (SELECT cst_id from silver.crm_cust_info)


--check for invali dates(negative or zero value can't cast to date)
--LENGTH OF ORDERDATE SHOULD (8)===2012-05-23(otliers check)
select
NULLIF(sls_order_dt,0)sls_order_dt
from bronze.crm_sales_details
where sls_order_dt <= 0 OR LEN(sls_order_dt) != 8 or sls_order_dt > 20500101 or sls_order_dt < 19000101

--no record of invalid logic between dates
SELECT
* 
FROM bronze.crm_sales_details
WHERE sls_order_dt> sls_ship_dt or sls_order_dt > sls_due_dt

--sales=price* quantity

select distinct
sls_sales  ,
sls_price ,
sls_quantity
from bronze.crm_sales_details
where sls_sales!= sls_quantity *sls_price
 or sls_sales <= 0 or sls_sales is null
 or sls_price <= 0 or sls_price is null
 or sls_quantity <= 0 or sls_quantity is null




select distinct
sls_sales as old_sales,
sls_price as old_price,
sls_quantity,

-- if sales null or negative or zero then make sales ==price*quantity
CASE WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales != ABS(sls_price) * sls_quantity
	 THEN sls_quantity * ABS(sls_price)
	 ELSE sls_sales
END AS sls_sales,
--if price null or negative or zero then sales/quantity
CASE WHEN sls_price IS NULL OR sls_price <= 0 
	THEN sls_sales/ NULLIF(sls_quantity,0)
	ELSE sls_price
END AS sls_price

from bronze.crm_sales_details
where sls_sales != sls_quantity * sls_price
 or sls_sales <= 0 or sls_sales is null
 or sls_price <= 0 or sls_price is null
 or sls_quantity <= 0 or sls_quantity is null
 --erp --cust_az12
 select distinct CASE WHEN UPPER(TRIM(gen)) IN ('F', 'FEMALE') THEN 'Female'
		 WHEN UPPER(TRIM(gen)) IN ('M', 'MALE') THEN 'Male'
		 ELSE 'n/a'
	END gen
 from bronze.erp_cust_az12
